package example;
/*
Una vez cargado el driver es necesario crear un objeto del tipo Connection, para administrar la conexión.
Una aplicación puede utilizar DriverManager para obtener un objeto de tipo conexión, Connection, con una base de datos.
La conexión se especifica siguiendo una sintaxis basada en la especificación más amplia de los URL, de la forma:
basada en la especificación más amplia de los URL, de la forma:  jdbc:subprotocolo//servidor:puerto/base de datos
La siguiente línea de código ilustra ésta idea:  Connection con = DriverManager.getConnection(url, "myLogin", "myPassword");

Si uno de los drivers que hemos cargado reconoce la URL suministada por el método DriverManager.getConnection,
dicho driver establecerá una conexión con el controlador de base de datos especificado en la URL del JDBC.
La clase DriverManager, como su nombre indica, maneja todos los detalles del establecimiento de la conexión
detrás de la escena.
La conexión devuelta por el método DriverManager.getConnection es una conexión abierta que se puede utilizar
para crear sentencias JDBC que pasen nuestras sentencias SQL al controlador de la base de datos.
 */
import java.sql.*;
public class JdbcDemo {
    public static void main(String[] args) throws SQLException {

        // Connection is an interface.  A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.
        Connection myConn = null;

        // Statement is an Interface. The object used for executing a static SQL statement and returning the results it produces.
        Statement myStmt = null;

        // ResultSet is an interface. A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
        // A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row.
        // The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object,
        // it can be used in a while loop to iterate through the result set.
        ResultSet myRs = null;

        String dbUrl = "jdbc:mysql://localhost:3306/demo?useSSL=false"; // jdbc:subprotocolo//servidor:puerto/base de datos. The ?useSSL=false is to avoid SSL warnings
        String user = "student";
        String pass = "student";

        try {
            // 1. Get a connection to database
            /*
            The getConnection(String url) method of Java DriverManager class attempts to establish a connection to the database by using the given database URL.
            The appropriate driver from the set of registered JDBC drivers is selected. Look for the Class DriverManager
             */
            myConn = DriverManager.getConnection(dbUrl, user, pass);

            // 2. Creates a Statement object for sending SQL statements to the database. SQL statements without parameters are normally executed using Statement objects.
            //    If the same SQL statement is executed many times, it may be more efficient to use a PreparedStatement object.
            myStmt = myConn.createStatement();

            // 3. Executes the given SQL statement, which returns a single ResultSet object.
            // Returns: a ResultSet object that contains the data produced by the given query; never null
            myRs = myStmt.executeQuery("select * from employees");

            // 4. Process the result set
            while (myRs.next()) { // returns true if there are more rows to read
                System.out.println(myRs.getString("last_name") + ", " + myRs.getString("first_name"));
            }
        }
        catch (Exception exc) {
            exc.printStackTrace();
        }
        finally {
            if (myRs != null) {
                myRs.close();
            }

            if (myStmt != null) {
                myStmt.close();
            }

            if (myConn != null) {
                myConn.close();
            }
        }
    }

}
